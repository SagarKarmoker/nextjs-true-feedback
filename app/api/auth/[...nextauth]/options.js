import CredentialsProvider from "next-auth/providers/credentials"
import bcrypt from 'bcryptjs'
import connectDB from '@/lib/dbConfig'
import UserModel from '@/model/UserModel'

export const authOptions = {
    providers: [
        CredentialsProvider({
            id: "credentials",
            name: "Credentials",
            credentials: {
                email: { label: "Email", type: "email" },
                password: { label: "Password", type: "password" }
            },
            async authorize(credentials) {
                await connectDB();
                try {
                    const user = await UserModel.findOne({
                        $or: [
                            { email: credentials.email },
                            { username: credentials.email }
                        ]
                    })

                    if (!user) {
                        throw new Error("No user found")
                    }

                    if (!user.isVerified) {
                        throw new Error("Please verify your account first")
                    }

                    const isValid = await bcrypt.compare(credentials.password, user.password)
                    if (!isValid) {
                        throw new Error("Invalid password")
                    }
                    else {
                        return user; // If the credentials are valid, the user object will be returned
                    }
                } catch (error) {
                    console.log("Error in authorize", error)
                    throw new Error("Something went wrong while authorizing", error)
                }
            }
        })
    ],
    callbacks: {
        async session({session, token}) {
            if(token){
                session.user._id = token._id;
                session.user.isVerified = token.isVerified;
                session.user.isAcceptingMsg = token.isAcceptingMsg;
                session.user.username = token.username;
            }
            return session;
        },
        async jwt({token, user}) { // modifing the the token
            if(user){
                token._id = user._id?.toString();
                token.isVerified = user.isVerified;
                token.isAcceptingMsg = user.isAcceptingMsg;
                token.username = user.username;
            }
            return token;
        }
    },
    pages: {
        signIn: '/sign-in', // auto generated by next-auth
    },
    session: {
        strategy: "jwt"
    },
    secret: process.env.JWT_SECRET,
}
