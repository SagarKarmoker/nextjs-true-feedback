import CredentialsProvider from "next-auth/providers/credentials"
import bcrypt from 'bcryptjs'
import connectDB from '@/lib/dbConfig'
import UserModel from '@/model/UserModel'

export const authOptions = {
    providers: [
        CredentialsProvider({
            id: "credentials",
            name: "Credentials",
            credentials: {
                identifier: { label: "Email or Username", type: "text" },
                password: { label: "Password", type: "password" }
            },
            async authorize(credentials) {
                console.log("Credentials", credentials)
                await connectDB();
                try {
                    const user = await UserModel.findOne({
                        $or: [
                            { email: credentials.identifier },
                            { username: credentials.identifier }
                        ]
                    })

                    if (!user) {
                        console.log("No user found")
                        return null; // Return null if no user is found
                    }

                    if (!user.isVerified) {
                        console.log("Please verify your account first")
                        return null; // Return null if the account is not verified
                    }

                    const isValid = await bcrypt.compare(credentials.password, user.password)
                    if (!isValid) {
                        console.log("Invalid password")
                        return null; // Return null if password is invalid
                    }

                    // Return user object (or return specific fields only)
                    return {
                        _id: user._id,
                        email: user.email,
                        username: user.username,
                        isVerified: user.isVerified,
                        isAcceptingMsg: user.isAcceptingMsg
                    };
                } catch (error) {
                    console.log("Error in authorize", error)
                    return null; // Return null in case of any other error
                }
            }

        })

    ],
    callbacks: {
        async session({ session, token }) {
            if (token) {
                session.user._id = token._id;
                session.user.isVerified = token.isVerified;
                session.user.isAcceptingMsg = token.isAcceptingMsg;
                session.user.username = token.username;
            }
            return session;
        },
        async jwt({ token, user }) { // modifing the the token
            console.log("User:", user); // Log user
            console.log("Token:", token);
            if (user) {
                token._id = user._id?.toString();
                token.isVerified = user.isVerified;
                token.isAcceptingMsg = user.isAcceptingMsg;
                token.username = user.username;
            }
            return token;
        }
    },
    pages: {
        signIn: '/sign-in', // auto generated by next-auth
    },
    session: {
        strategy: "jwt"
    },
    secret: process.env.NEXTAUTH_SECRET,
}
